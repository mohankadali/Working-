1: What is the maximum message you can send in a message queue ?

> One message can send only 8k bytes but its is configurable . 
  
  Maximum messages in one message queue is 10 messages. therefore for one queue maximum size will be ( 10 x 8k = 80k bytes ).

  If you wanna send more messages that is more than 10 message , then you need to open one more message queue. 


2: How can you say message wueue is in kernal space ?

>  Though the function call we use in our application programs 

		like :
			mq_send () , mq_open, mq_receive etc 

  These above message queue function calls will internally call the system calls corresponding to each function calls . The corresponding system calls will write to /dev/mqueue/<msg_q_name> . while reading also it will read from this path.
 
  if you are trying to send messages more than 10 , and you are not and aware how many messages you have sent then you can check this by using  mq_getattr().


3: Sending 10000 bytes at once in message queue is possible or not ?

>  By default the message size will be 8k so it is not accepting , therefore we need to configure the maximum size of the message before sending.


4: Why we need .bss ?

>  If uninitialised variables were put into data section then those varibles also take space in the file , which is not efficient because it is initialised with zero . Therefore to reduce the file size the compiler created .bss section to hold all these uninitialised variables so that these variables dont get any space in file . Hence file size reduces.

5: In three way hand shaking what is the use of acknowledgement packet sent by client  ?

>  So that the sever knows that the client has recieved it acknowledgement + SYN packet along with sequence number generated by server.

   If the packet uses one sequence number we need to acknowledge to server/client . if it is not consuming any sequence number then  no need to provide ACK for the server/client.   



6: Why in four way hand shaking FIN packet sent by server after some time , after sending ACK to the FIN packet sent by client ?

>  FIN packet sent by client :
				client send the FIN packet when it has no data to be sent to the server. Server on recieving this FIN reqest then server will acknowledge this request by send ACK packet to client .

   FIN packet sent by server :
				if server has some more data to be sent to the client for the previous request sent by client , the server will send the processed data , only after sending this data the server will send FIN request to client , then client will acknowledge this request. 



7: If thread 1 aquires a shared resource with mutex lock and is waiting for I/O operation , and thread 2 tries to unlock this shared resource it will fail with error.
  
