key points :

Video1:

 1. one nibble contains 4 bits
 2. 2's comliment required for representing negative numbers
 3. hexa decimals plays a key role in representing addres
 4. little and big endian are separated because of our conveniance
 5. relocatable object files(compile time) and executable files(linking time) both are diffrent
 6. compiler is aware f only storage, memory will not come into at compiler stage.
 
Video2:

 1.Data types contains the combination of type specifiers like signed unsinged, short, long   	
 2.constants like character('\n','\0') , string constants("hello", "bye" includding null) macros,enum also one kind of constant	 
 3.we can pass enum variables as function params but not macros. 
 4.declaration(extern) means no storage space allocated, definition, initialization 
 5.storage class\ specifiers (watch video for more details). 

Video3:

 1.we can not modify const values directly but using pointers we can do. const values will store in .rodata region 	
 2.for global static and local static we can use const qualifiers
 3.volatile qualifier is for block the optimization, time of faster execution 

Video4:

 1. % operator can not be used for float and double 
 2. in operator concept we need to take care of precedence 
 3. Need to put separate focus on bitwise operator 
 4. We have two types of type casting 
 5. compiler will do bydefault implicit type cast.
 6. if two oparands have diff type, lower type promoted to higher type and result will be higher type.
 7. type cast have more importance because if we open a file and it fails it should return proper error value, if not it will mislead the code flow.
 
Video 5;

 1.while using control statements, we should we defensive programming otherwise if, else conflicts will occure. 
 2.for switch case label should be const int expression means it search for ascii character      
 
Video 6,7:

 1.should learn about function stack 

Video 8:

 1.preprocessor is a first stage of application building processs 
 2.we can identify the preprocessor keywords using # 
 3. /lib/libc-2.17.so is the lib for preprocessor(printf definition will be here)
 4. /usr/include/stdio.h contains the declarations 
 5. gcc -M file.c which shows all header files included 
 6. header guards 

Video 9:
 
 1.poiter is an operator which holds the address of the another variable.
 2.point may not be associated with specific data type, it can be a void pointer, also called generic pointer 
 3.unlike pointers we can not increment array name because array is a derivred data type.
 4.typedef is used to creat a alais name for it.  	  
 5.typedef is a portable to define data types 
 6.only poiter substraction is valid 

Video 10;
 
 1.we can not write into char *p = "rodata" 
 2.if we pointing to the char *p = array[0], then we can modify because array we can change but not rodata content  

Video 11;

 1. dynamic memory allocation, poiter to array, array of pointers 

Video 12:

 1.can we allocate dynamic memory for funtion pointers?  
 2.can we do function pointers arthemetics  
 3.example for function pointr is bootloader initialization sequence 
 4.command line arguments 
  











































what you know about files ? (read files concept)

strstr ,strtok ?













Q:Enum data type and using enum inside a structure?
A:we can use enum inside structure but not typedef.  

Q:Why Intermediate code generation?
A:







Q:what is header guard ? explain?

Q:What is Core file?

command used to do packing during compile time ?

stack and queue real time applications?

addr2line tool, valgrind tool?

levels of optimization ?

what is flexible array ?

deference between array of pointers  and pointer to an array ?

Variable list arguments?

What is lvalue and rvalue?

Where the command line arguments are stored?

Do preprocessing directives follow any order?

Use of function pointer and how it can be accessed and where it is getting stored?

Size of structures , where it can be used?

What are the types of library and how its been resolved the address of library?

Bit fields?

What is cross-compilation and how to implement that?

Difference between memcpy and memmove?

How free() works?

What happens when two header files are included?

What is stub code?

What is call Back function?

What is the maximum  no.of arguments to be passed to a function?

What is address binding?

What is present in object file?

Explain about linkers and loader?

Q:how to declare a varible with size 0 ?
A: int arr[0];

Q:how to Print a string without printf ?
A: use write system call

How memory mapping will happen?

Copying specific number of bits from in one number to other number using bitwise opeartors?

Q:Can we give break inside ifelse?
A: break designed only for loops 

Program to find endianess of the machine using structure or union?

initialising an array of structure objects?

preprocessor directives?

Declare a variable that should be present in stack and its lifetime is throughout the program?

What happens if in the program given like printf(“%d”) and printf(“%d”,)?

undefined macro in which compiler stage it will give error?

Declare 10 array of function pointers and initialize it?

Define loopback fuction or call back functions?

Implement your own sizeof its work in all condition ex: for constant value...my_size(7)?

Implement memcpy() and memmove()(without using other temp buffer means not allocated any storage space for that variable)?

readelf , objdump ?

why we using #define to define a constant . rather than by using keyword..i.e like int a = 10; ?

In case of volatile, how the compiler takes the data every time from memory, not from the cache ?

Explain about padding? how do you avoid it? and what is uses of that??

Nested  union possible or not?if possible explain the senario?

Is there any  relation between padding and internal hardware??

how can you pass the pragma pack value through gcc?

Explain preprocessor  directives?how to define & undefine the value at run time?

What is the benefit of using an enum rather than a #defined constant ? Explain with an example?

Q:How variable argument lists works in c?
A:if we wanna pass n number of arguments in a function we use this concept
 
Q:How do you override a defined macro?
A:using #undef

How many levels deep can include files be nested?

Can you define which header file to include at compile time?

Q:Can a file other than a .h file be included with #include?
A: yes

Q:How to pass entire array to a function as call by value ?
A:we can not pass

What is the purpose of main( ) function?

Take byte as an input give bit as an output?

About the arrays bound checking?

When does the compiler not implicitly generate the address of the first element of an array?

Q:Can the sizeof operator be used to tell the size of an array passed to a function?
A:using pointers only we can do.

I have byte array, I need to set a bit at position 500 ?

Q:Can we return more than two values from a function without using Pointers?
A:using arrays and structures we can do.

Q:Are pointers integers? 
A:yes

What does it mean when a pointer is used in an if statement? 

How to convert float to binary ?

What is typedef. How it is Different from #define ?

what are weak symbols, explain its advantages or disadvantages?

Q:What is garbage collection?
A:its nothing but a freeing memory in dynamic memory allocation

Int a;  printf(“%u” , &a)  if it prints 67. Is it possible ? (He wants to ask whether the address of integer can be starts with odd address ?)

Which expression always return true? Which always return false?

Write the equivalent expression for x%8?

Why n++ executes faster than n+1?

What is the difference between NULL and NUL?

Q:Can static variables be declared in a header file?
A:yes 

why the static variable coming in other file ,if you pass as a function argument?

Q:why we are not using register variables globally?
A:cpu registerdo not wanna wait for long process, if u delare in globally through out file it ca not be freed till end of program   

can we use static variable in one file as a extern variable in other file?

I am taking array as a pointer and passing that pointer address in function , can i change some value in that array in that function?

how will you pass command line argument in GDB?

Q:what is the specific use of BSS data segment?
A:by default .bss value will be zerom so, all not initaized values will be in .bss section.

tell about SDLC ?

Using one array create 2 stacks and optimize it?

How we will come to know if one sender sending msg and received by reciever  which type of it is. (int, char, string)

write aprogram to send structure variables from client to server and chage in server like
     struct {
     	int a= 10;
     	char *ptr = “GESL”;
     	int c = 20;
     };

who will decide the size of datagram and where it will be store?

who is moving from .bss to data?

Given an array of fixed length with only 0, 1, 2 numbers filled in random order:
     ex:
       Given an array of size = 20
         i/p: 1, 0, 2, 0, 2, 1, 0, 0, 2, 1, 1, 2, 0, 2, 1, 0, 1, 1, 0, 1
         o/p: 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2.
     Conditions apply: you can only use 1 loop.

Why do we need to typecast  return value of  the  malloc() when creating node ?
    NOTE : Interview panel  Said I am using without typecasting in my program.

How memory will allocate with malloc() internally(program_break,brk(),sbrk() explanation)


If we declare one variable in header file and again we declare same variable in c file(header file included) what it will happen. If we initialize the variable in header file what it will happen.

how to print maximum value of amy data type?

In PC where c program stored & Run?

Implement atox. 

How to allocate memory to a ptr without deleting the existing memory?Write the syntax for the same?

we have one sample1.c, one sample2.s, one sample.h file how will you compile all in a single command.

Compilation Process Explain step by step?
        commands to execute a.c , a.i, a.s, a.o,         how compiler will identify dead code (optimization techinque)












