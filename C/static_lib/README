Linking:

Linking is the process of collecting and combining various pieces of code and
data into a single file that can be loaded (copied) into memory and executed. 

Linking can be performed at compile time, when the source code is translated
into machine code, at load time, when the program is loaded into memory and
executed by the loader, and even at run time, by application programs.

On early computer systems, linking was performed manually. On modern systems,
linking is performed automatically by programs called linkers.

To build the executable, the linker must perform two main task:-

Symbol resolution:
------------------
Object files define and reference symbols. The purpose of symbol resolution is
to associate each symbol reference with exactly one symbol definition.

Relocation:
-----------
Compilers and assemblers generate code and data sections that start at address
0. The linker relocates these sections by associating a memory location with
each symbol definition, and then modifying all of the references to those
symbols so that they point to this memory location.


Ans. Linking :
--------------
--------------
  In the compilation process once after the compiling has been successfully
completed we get all the relocatable object modules which must be linked
together to get a final executable code. This linking can be either static or
dynamic.
  In static linking all the static libraries and relocatable object modules will
be present in the executable file.
  In the case dynamic linking all the shared libraries will be loaded into the
our executable once it gets loaded into the memory. The advantage of dynamic
linking is that the libraries that we add will not be part of the executable
file, so that file size gets reduced.


Ans. Loading :
-----------
-----------
  Loading is bringing the executable code into the main memory for execution.
The header record is checked to verify that there correct program is been
presented for loading. As each text record is read, the object code it contains
is moved to the indicated address in memory. When the end record in encountered,
the loader jumps to the specified address to begin the execution of the loaded
program.
